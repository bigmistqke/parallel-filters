[
  "// this function gets serialized and send to web-workers.",
  "// arguments: ",
  "//   - an index inside a sharedarraybuffer",
  "//   - a clone of the sharedarraybuffer as source",
  "//   - the width of the image in pixels",
  "",
  "// convolution-example",
  "(index, buffer, width) => {",
  "  const kernel = [",
  "    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],",
  "    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],",
  "    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],",
  "    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],",
  "    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],",
  "    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],",
  "    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],",
  "    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],",
  "    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],",
  "  ];",
  "  ",
  "  const offset = Math.round(kernel.length / 2) - 1;",
  "  let totalWeights = 0;",
  "  kernel.forEach((row) =>",
  "    row.forEach((weight) => (totalWeights += Math.abs(weight)))",
  "  );",
  "  ",
  "  const x = index % (width * 4);",
  "  const y = Math.floor(index / (width * 4));",
  "  let average = 0;",
  "  ",
  "  kernel.forEach((row, i) =>",
  "    row.forEach((weight, j) => {",
  "      const index = ",
  "        x + (i - offset) * 4 + ",
  "        (y + j - offset) * width * 4;",
  "      const value = buffer[index];",
  "      if (value) average += (weight * value) / totalWeights;",
  "    })",
  "  );",
  "  ",
  "  return index % 4 === 3 ",
  "    ? buffer[index] ",
  "    : average",
  "}",
  "",
  "",
  ""
]
